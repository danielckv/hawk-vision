# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  branches:
   include:
     - main
# - dev
  paths:
    include:
      - labeldata_studio/
    exclude:
    - 'Dockerfile-gpu'
    - 'algorithms/'
    - 'anomaly_detection/'
    - 'azure-pipelines.yml'
    - 'k8s/*'
    - 'nginx.conf'
    - 'overall.diagram.mmd'
    - 'requirements.txt'
    - 'rius_engine/*'
    - 'riuslabs-app-service.service'
    - 'riuslabs-ui-app/*'
    - 'shared/*'
    - 'video-analysis/*'
    - 'web-api/*'
resources:
- repo: self

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/main') }}:
    tag: $(Build.BuildId)_${{ variables['Build.SourceBranchName'] }}
    environment: 'sirius-prod.sirius-prod'
    kubernetesServiceConnection: 'deploy-robot-sirius'
    namespace: 'sirius-prod'
    dockerfileToUse: '$(Build.SourcesDirectory)/labeldata_studio/Dockerfile-label'
    manifests: $(Pipeline.Workspace)/k8sManifests/studio-sirius-deployment.yml
  
  # ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/gpu') }}:
  #   tag: $(Build.BuildId)_${{ variables['Build.SourceBranchName'] }}
  #   environment: 'presight-ai-test.presight-ai-test-01'
  #   kubernetesServiceConnection: 'deploy-robot-presight'
  #   namespace: 'presight-ai-test-01'
  #   dockerfileToUse: '$(Build.SourcesDirectory)/Dockerfile-gpu'
  #   manifests: $(Pipeline.Workspace)/k8sManifests/gpu-deployment.yml

  # ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/dev') }}:
  #   tag: $(Build.BuildId)_${{ variables['Build.SourceBranchName'] }}
  #   environment: 'sirius-prod.sirius-prod'
  #   kubernetesServiceConnection: 'deploy-robot-sirius'
  #   namespace: 'sirius-prod'    
  #   manifests: $(Pipeline.Workspace)/k8sManifests/sirius-deployment.yml
    
  buildName: 'labeldata_studio'
  imageRepo: labeldata_studio

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: 'Building-${{ variables.tag }}'
    pool:
      name: Presight
      vmImage: ubuntu-latest
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        containerRegistry: 'jfrog'
        repository: 'test-docker/$(buildName)'
        command: 'build'
        Dockerfile: '$(dockerfileToUse)'
        tags: '$(tag)'
      env:
        DOCKER_BUILDKIT: 1
- stage: Push
  displayName: Push
  jobs: 
  - job: Push
    displayName: Push
    pool:
      name: Presight
      vmImage: ubuntu-latest
    steps: 
    - task: Docker@2
      inputs:
        containerRegistry: 'jfrog'
        repository: 'test-docker/$(buildName)'
        command: 'push'
        tags: |
          $(tag)
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/k8s'
        artifact: 'k8sManifests'
        publishLocation: 'pipeline'
- stage: Deploy
  displayName: Deploy
  dependsOn: Push
  variables:
    acrdevurl: 'presight.jfrog.io'
    jfrogsecret: k8secretauth
  jobs: 
    - deployment: Deploy
      displayName: 'Deploy-to-${{ variables.namespace }}'
      environment: $(environment)
      pool:
        name: Presight
        vmImage: ubuntu-latest
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                artifactName: 'k8sManifests'
                targetPath: '$(Pipeline.Workspace)/k8s'
            - task: KubernetesManifest@0
              inputs:
                action: 'createSecret'
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(namespace)'
                secretType: 'dockerRegistry'
                secretName: '$(jfrogsecret)'
                dockerRegistryEndpoint: 'jfrog'
            - task: KubernetesManifest@0
              inputs:
                action: 'deploy'
                kubernetesServiceConnection: '$(kubernetesServiceConnection)'
                namespace: '$(namespace)'
                manifests: '$(manifests)'
                containers: '$(acrdevurl)/test-docker/$(imageRepo):$(tag)'
                imagePullSecrets: '$(jfrogsecret)'
- stage: Cleanup
  displayName: Cleanup
  jobs:
  - job: Clean
    workspace:
      clean: all
  