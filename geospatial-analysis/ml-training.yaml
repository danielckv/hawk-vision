name: ML-Pipeline- podName works!
trigger: none

stages:
- stage: GetPod
  displayName: GetPod  
  jobs:
  - job: GetPodJob
    displayName: GetPod
    pool:
      name: Presight
      vmImage: ubuntu-latest
    steps:
    - task: Kubernetes@1
      name: GetPodTask
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'deploy-robot-sirius'
        namespace: 'sirius-prod'
        command: 'get'
        arguments: 'pods -l app=data-services -o name'
        outputFormat: 'none'
    - script: |
        rawPodName=$(echo "$(GetPodTask.KubectlOutput)")
        echo rawPodName = $rawPodName
        podName=$(echo "${rawPodName}" | sed 's|pod/||')
        echo "Extracted Pod Name: ${podName}"
        if [ -z "${podName}" ]; then
          echo "Error: Could not extract pod name from the output."
          exit 1
        fi
        echo "##vso[task.setvariable variable=podName;isOutput=true]${podName}"
      name: setPodName
      displayName: 'Set Pod Name'





- stage: dataSetDownload
  dependsOn: GetPod
  displayName: dataSetDownload
  variables:
    # Reference the output variable from the first stage
    podName: $[ stageDependencies.GetPod.GetPodJob.outputs['setPodName.podName'] ]
  jobs:
  - job: FromGetPod
    # variables:
    #   - name: podName
    #     value: $[ stageDependencies.GetPod.GetPod.outputs['setPodName.podName'] ]
    displayName: FromGetPod
    pool:
      name: Presight
      vmImage: ubuntu-latest
    steps:
    - script: |
        echo "##vso[task.setvariable variable=podName;isOutput=true]$(podName)"
      name: reSetPodName
      displayName: 'Re-Set Pod Name'
    - task: Bash@3
      displayName: SetSiriusAWSProfile
      inputs:
        targetType: 'inline'
        script: 'export AWS_PROFILE=sirius'
    - script: |
        echo "check environment vars"
        echo "DATA_SET: $(DATA_SET)"
        echo "TRAINING_BUCKET: $(TRAINING_BUCKET)"
        
        echo "Creating directory /app/scripts in the pod"
        kubectl exec -n sirius-prod $(podName) -c data-services -- mkdir -p /app/scripts
        
        echo "Copying download.py to the pod"
        echo "Pod Name: $(podName)"
        kubectl cp ./scripts/download.py $(podName):/app/scripts/download.py -c data-services -n sirius-prod
        if [ $? -ne 0 ]; then
          echo "Failed to copy script to the pod"
          exit 1
        fi
        
        echo "Running download script in the pod"
        kubectl exec -n sirius-prod $(podName) -c data-services -- sh -c "
          export AWS_AKID=$(AWS_AKID) &&
          export AWS_SK=$(AWS_SK) &&
          export AWS_BUCKET_REGION=$(AWS_BUCKET_REGION) &&
          export TRAINING_BUCKET=$(TRAINING_BUCKET) &&
          export DATA_SET=$(DATA_SET) &&
          python /app/scripts/download.py
        "
        if [ $? -ne 0 ]; then
          echo "Failed to run download script in the pod"
          exit 1
        fi

        echo "Installing unzip in the pod"
        kubectl exec -n sirius-prod $(podName) -c data-services -- sh -c "
          apt-get update && apt-get install -y unzip
        "
        if [ $? -ne 0 ]; then
          echo "Failed to install unzip in the pod"
          exit 1
        fi


        echo "Unzipping downloaded files in the same folder"
        kubectl exec -n sirius-prod $(podName) -c data-services -- sh -c "
          cd /app/datasets/$(DATA_SET) && unzip -o '*.zip'
        "
        if [ $? -ne 0 ]; then
          echo "Failed to unzip files in the pod"
          exit 1
        fi

        echo "Removing zip files"
        kubectl exec -n sirius-prod $(podName) -c data-services -- sh -c "
          rm /app/datasets/$(DATA_SET)/*.zip
        "
        if [ $? -ne 0 ]; then
          echo "Failed to remove zip files"
          exit 1
        fi
      displayName: 'Copy Script to Pod and Unzip Files'
    - task: Kubernetes@1
      displayName: 'Execute Python Script with Env Variables'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'deploy-robot-sirius'
        namespace: 'sirius-prod'
        command: 'exec'
        arguments: |
          $(podName) -c data-services -- /bin/bash -c "
            export AWS_AKID=$(AWS_AKID) &&
            export AWS_SK=$(AWS_SK) &&
            export AWS_BUCKET_REGION=$(AWS_BUCKET_REGION) &&
            export TRAINING_BUCKET=$(TRAINING_BUCKET) &&
            export DATA_SET=$(DATA_SET) &&
            python /app/scripts/download.py"
        secretType: 'generic'
        versionSpec: '1.27.3'








- stage: Training
  dependsOn:
    - GetPod
    - dataSetDownload
  displayName: Training
  variables:
    # Reference the output variable from the first stage
    podName: $[ stageDependencies.GetPod.GetPodJob.outputs['setPodName.podName'] ]
  jobs:
    - job: TrainingJob
      displayName: TrainingJob
      pool:
        name: Presight
        vmImage: ubuntu-latest
      steps:
        - script: |
            echo "Pod Name in dataSetDownload Stage: $(podName)"
            if [ -z "$(podName)" ] || [ "$(podName)" == "{" ]; then
              echo "Error: podName is not set correctly"
              exit 1
            fi
          displayName: 'Echo Pod Name in Training Stage'
        - task: Bash@3
          displayName: SetSiriusAWSProfile
          inputs:
            targetType: 'inline'
            script: 'export AWS_PROFILE=sirius && kubectl config use-context sirius-prod'
        - task: Kubernetes@1
          name: runTrainingTask
          env:
            podName: $(podName)
          inputs:
            connectionType: 'Kubernetes Service Connection'
            kubernetesServiceEndpoint: 'deploy-robot-sirius'
            namespace: 'sirius-prod'
            command: 'exec'
            arguments: '$(podName) -c data-services -- /bin/bash -c "python3.10 /app/cli/main.py train --dataset-dir=/app/datasets/$(DATA_SET)"'
            secretType: 'generic'
            versionSpec: '1.27.3'
        - bash: |
            output=$(kubectl --context sirius-prod exec $(podName) -n sirius-prod -c data-services -- cat /app/train.txt)
            regex="Validating runs/detect/train.*/weights/best.pt"
            if [[ $output =~ $regex ]]; then
              startPath=${BASH_REMATCH[0]}
              modelPath=$(echo "$startPath" | sed 's/.*\(runs\/.*best\.pt\).*/\1/')
              timestamp=$(date +"%Y%m%d%H%M%S")
              modelPathWithTimestamp=$(echo "$modelPath" | sed "s|best.pt|${timestamp}best.pt|")
              kubectl --context sirius-prod exec $(podName) -n sirius-prod -c data-services -- mv "$modelPath" "$modelPathWithTimestamp"
              echo "##vso[task.setvariable variable=artifactPath;isOutput=true]$modelPathWithTimestamp"
              echo "Model Path with Timestamp: $modelPathWithTimestamp"
            else
              echo "Model path not found in the output"
              exit 1
            fi
          name: extractArtifactPath
          displayName: 'Find artifact path'
          env:
            KUBECONFIG: $(kubeconfig)
        - script: |
            echo "##vso[task.setvariable variable=podName;isOutput=true]$(podName)"
          name: setPodName
        - script: |
            artifactPath=$(echo "$(extractArtifactPath.artifactPath)")
            echo "Extracted Artifact Path: ${artifactPath}"
            if [ -z "${artifactPath}" ]; then
              echo "Error: artifactPath is not set correctly"
              exit 1
            fi
            echo "##vso[task.setvariable variable=artifactPath;isOutput=true]${artifactPath}"
          name: setArtifactPath
          displayName: 'Set Artifact Path'
        - bash: |
            if [ -z $[ stageDependencies.Training.TrainingJob.outputs['setArtifactPath.artifactPath'] ] ]; then
              echo "artifactPath variable is not set"
              exit 1
            fi
            artifactPath = $[ stageDependencies.Training.TrainingJob.outputs['setArtifactPath.artifactPath'] ]
            modelDir=$(dirname "$(artifactPath)")
            modelFile=$(basename "$(artifactPath)")
            timestamp=$(date +'%Y%m%d%H%M%S')
            newModelFile="${timestamp}best.pt"
            newModelPath="${modelDir}/${newModelFile}"
            kubectl --context sirius-prod exec $(podName) -n sirius-prod -c data-services -- mv "$(artifactPath)" "${newModelPath}"
            echo "##vso[task.setvariable variable=artifactPath;isOutput=true]${newModelPath}"
            echo "New Model Path: ${newModelPath}"
          name: renameModel
          displayName: 'Rename Model with Timestamp'
          env:
            KUBECONFIG: $(kubeconfig)
            artifactPath: $(artifactPath)



- stage: pushModel
  displayName: pushModel
  condition: always()
  jobs:
  - job: UploadModel
    variables:
        podName: $[ stageDependencies.Validation.ValidationJob.outputs['setPodName.podName'] ]
        modelPath: $[ stageDependencies.Validation.ValidationJob.outputs['setTrainedPath.trainedPath'] ]
    displayName: UploadModel
    pool:
      name: Presight
      vmImage: ubuntu-latest
    steps:
    - task: Kubernetes@1
      env:
        podName: $(podName)
        MODEL_BUCKET: $(MODEL_BUCKET)
        MODEL_LOCATION: $(MODEL_LOCATION)
        MODEL_TO_PUSH: $(modelPath)
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'deploy-robot-sirius'
        namespace: 'sirius-prod'
        command: 'exec'
        arguments: '$(podName) -c data-services -- /bin/bash -c "export TRAINING_BUCKET=$(TRAINING_BUCKET) && export MODEL_BUCKET=$(MODEL_BUCKET) && export MODEL_TO_PUSH=$(modelPath) && export AWS_SECRET_KEY=$(AWS_SK)  && export AWS_ACCESS_KEY_ID=$(AWS_AKID)  && export AWS_BUCKET_REGION=eu-west-1  && python /app/scripts/upload-model.py"'
        secretType: 'generic'
        versionSpec: '1.27.3'
    - script: |
        echo "Path value: $(modelPath)"
        echo "##vso[task.setvariable variable=trainedPath;isOutput=true]$modelPath"
        echo "Path value: $(trainedPath)"
      name: setTrainedPath
      displayName: 'Set trainedPath output variable'
